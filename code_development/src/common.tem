#include "../include/code_development.h"

template<typename T> std::string stringify(T string_input){ return std::string(string_input); }
template<typename T> char* charify(T string_input){ return std::string(string_input).c_str(); }
//template<typename T> char* charify(T string_input)
//{
//    //cout<< "charify: " <<std::string(string_input) << endl;
//    __string = std::string(string_input);
//    //cout<< "charify out: " <<__string << endl;
//    return __string.c_str();
//}
//template<typename T, typename S> std::stringstream  ls (T directory, S... optargs)
template<typename T> std::stringstream  ls (T directory)
{
    #if defined(_WIN32) || defined(_WIN64)
		sprintf( __system_command, "%s \"%s\"", __ls_cmd_win, std::string(directory).c_str());
    #else
        sprintf( __system_command, "%s %s", __ls_cmd_linux, std::string(directory).c_str());
    #endif
    cout<< "__system_command: " <<__system_command << endl;
    //__string = exec(__system_command);
    //return std::stringstream(__string);
    return std::stringstream(exec(__system_command));
}
//template<typename T> std::stringstream  lsB (T directory)
////template<typename T, typename S> std::stringstream  lsB (T directory)
//{
//    //ls -d B_25600_L_0.000100_TV_1*
//    #if defined(_WIN32) || defined(_WIN64)
//		sprintf( __system_command, "%s %s", __ls_cmd_win, std::string(directory).c_str());
//    #else
//        sprintf( __system_command, "%s %s", __ls_cmd_linux, std::string(directory).c_str());
//    #endif
//    //__string = exec(__system_command);
//    //return std::stringstream(__string);
//    return std::stringstream(exec(__system_command));
//}
//template<typename T, typename S> std::stringstream  lsB (T directory, S optargs...)
////template<typename T, typename S> std::stringstream  lsB (T directory)
//{
//    //ls -d B_25600_L_0.000100_TV_1*
//    #if defined(_WIN32) || defined(_WIN64)
//		sprintf( __system_command, "%s %s", __ls_cmd_win, std::string(directory).c_str());
//    #else
//        sprintf( __system_command, "%s %s", __ls_cmd_linux, std::string(directory).c_str());
//    #endif
//    //__string = exec(__system_command);
//    //return std::stringstream(__string);
//    return std::stringstream(exec(__system_command));
//}
//template<typename T> std::stringstream  lsC (T directory, std::string optargs = std::string(""))
////template<typename T, typename S> std::stringstream  lsC (T directory, S optargs...)
////template<typename T, typename S> std::stringstream  lsB (T directory)
//{
//    //ls -d B_25600_L_0.000100_TV_1*
//    #if defined(_WIN32) || defined(_WIN64)
//		sprintf( __system_command, "%s %s", __ls_cmd_win, std::string(directory).c_str());
//    #else
//        sprintf( __system_command, "%s %s", __ls_cmd_linux, std::string(directory).c_str());
//    #endif
//    //__string = exec(__system_command);
//    //return std::stringstream(__string);
//    return std::stringstream(exec(__system_command));
//}
template <typename T> std::string string_cat(T input_string)
{
    __outstring.clear();
	__line_sstream <<  input_string;
	while(__line_sstream >>__termout)
		__outstring += __termout;
	//strcat_elements.push_back(std::string(input_string));
	//for(int i = 0; i < strcat_elements.size(); i++)
	//	__outstring += strcat_elements[i];
    return __outstring;
}
template<typename T, typename... Args> std::string string_cat(T input_string, Args... strcat_list) // recursive variadic function
{
	__line_sstream <<  input_string;
	string_cat(strcat_list...);
    __line_sstream.clear();
    //strcat_elements.push_back(std::string(input_string));
    //string_cat(strcat_list...);
    //strcat_elements.clear();
	return __outstring;
}
template<typename... Args> void control_lkill( void (*_function)(Args... ), unsigned int kill_count_index , Args... args_list )
{
    //cout<< "kill_count_index: " << kill_count_index << endl;
    __KILL_FCALL_INDEX = kill_count_index;
    __KILL_LOOP_INDEX = kill_count_index;
    (*_function)(args_list...);
    __KILL_FCALL_INDEX = INT_MAX;
    __KILL_LOOP_INDEX = INT_MAX;
}
//template <class T> void func2( std::initializer_list<T> list )
//{
//    for( auto elem : list )
//    {
//        std::cout << elem << std::endl ;
//    }
//}
